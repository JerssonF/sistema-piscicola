#!/usr/bin/env powershell
# üöÄ INICIO DEL SERVIDOR PISC√çCOLA EN RED LOCAL

Write-Host "üöÄ INICIANDO SERVIDOR PISC√çCOLA" -ForegroundColor Green
Write-Host "================================`n" -ForegroundColor Green

# Verificar que estamos en el directorio correcto
if (-not (Test-Path "app.py")) {
    Write-Host "‚ùå Error: No se encontr√≥ app.py" -ForegroundColor Red
    Write-Host "   Aseg√∫rate de estar en el directorio del proyecto" -ForegroundColor Yellow
    pause
    exit 1
}

# Configurar variables de entorno para el servidor
$env:FLASK_HOST = "0.0.0.0"
$env:FLASK_PORT = "5000"
$env:FLASK_DEBUG = "False"

Write-Host "üìã Configuraci√≥n del servidor:" -ForegroundColor Cyan
Write-Host "  - Host: $env:FLASK_HOST (permite conexiones remotas)" -ForegroundColor White
Write-Host "  - Puerto: $env:FLASK_PORT" -ForegroundColor White
Write-Host "  - Debug: $env:FLASK_DEBUG" -ForegroundColor White

# Verificar Python
Write-Host "`nüêç Verificando Python..." -ForegroundColor Cyan
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python no encontrado. Instala Python primero." -ForegroundColor Red
    pause
    exit 1
}

# Verificar dependencias
Write-Host "`nüì¶ Verificando dependencias..." -ForegroundColor Cyan
$requiredPackages = @("flask", "mysql-connector-python")
foreach ($package in $requiredPackages) {
    try {
        $result = pip show $package 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $package instalado" -ForegroundColor Green
        } else {
            Write-Host "‚ùå $package NO instalado" -ForegroundColor Red
            Write-Host "   Instalando $package..." -ForegroundColor Yellow
            pip install $package
        }
    } catch {
        Write-Host "‚ö†Ô∏è  No se pudo verificar $package" -ForegroundColor Yellow
    }
}

# Verificar XAMPP/MySQL
Write-Host "`nüóÑÔ∏è Verificando MySQL..." -ForegroundColor Cyan
$mysqlProcess = Get-Process -Name "mysqld" -ErrorAction SilentlyContinue
if ($mysqlProcess) {
    Write-Host "‚úÖ MySQL est√° corriendo" -ForegroundColor Green
} else {
    Write-Host "‚ùå MySQL no est√° corriendo" -ForegroundColor Red
    Write-Host "   ‚ö†Ô∏è  Inicia XAMPP Control Panel y activa MySQL" -ForegroundColor Yellow
    $response = Read-Host "¬øQuieres que abra XAMPP Control Panel? (s/N)"
    if ($response -eq "s" -or $response -eq "S") {
        try {
            Start-Process "C:\xampp\xampp-control.exe" -Verb RunAs
            Write-Host "üìã Esperando que inicies MySQL en XAMPP..." -ForegroundColor Yellow
            Read-Host "Presiona Enter cuando MySQL est√© corriendo"
        } catch {
            Write-Host "‚ùå No se pudo abrir XAMPP. √Åbrelo manualmente." -ForegroundColor Red
            pause
        }
    }
}

# Probar conexi√≥n a base de datos
Write-Host "`nüîç Probando conexi√≥n a base de datos..." -ForegroundColor Cyan
try {
    $result = python database_config.py 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Conexi√≥n a base de datos exitosa" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Error en conexi√≥n a base de datos" -ForegroundColor Red
        Write-Host $result -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  No se pudo probar la conexi√≥n" -ForegroundColor Yellow
}

# Obtener IP del servidor
Write-Host "`nüåê Informaci√≥n de red:" -ForegroundColor Cyan
try {
    $ipInfo = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias "Wi-Fi*", "Ethernet*" | Where-Object { $_.IPAddress -notmatch "^127\." }
    if ($ipInfo) {
        $serverIP = $ipInfo[0].IPAddress
        Write-Host "  üìç IP del servidor: $serverIP" -ForegroundColor Green
        Write-Host "  üîó URL local: http://localhost:$env:FLASK_PORT" -ForegroundColor White
        Write-Host "  üåç URL remota: http://$serverIP`:$env:FLASK_PORT" -ForegroundColor Yellow
    } else {
        Write-Host "  ‚ö†Ô∏è  No se pudo obtener IP del servidor" -ForegroundColor Yellow
    }
} catch {
    Write-Host "  ‚ùå Error obteniendo informaci√≥n de red" -ForegroundColor Red
}

# Informaci√≥n para otros PCs
Write-Host "`nüë• Para conectar otros PCs:" -ForegroundColor Cyan
Write-Host "  1. Aseg√∫rate que est√°n en la misma red" -ForegroundColor White
Write-Host "  2. Usa la URL: http://$serverIP`:$env:FLASK_PORT" -ForegroundColor White
Write-Host "  3. Credenciales: admin / admin123" -ForegroundColor White

# Configuraci√≥n de Firewall
Write-Host "`nüî• Configuraci√≥n de Firewall:" -ForegroundColor Cyan
Write-Host "  ‚ö†Ô∏è  Si otros PCs no pueden conectar, revisa:" -ForegroundColor Yellow
Write-Host "     - Windows Firewall (puerto $env:FLASK_PORT)" -ForegroundColor White
Write-Host "     - Antivirus" -ForegroundColor White
Write-Host "     - Configuraci√≥n del router" -ForegroundColor White

Write-Host "`nüöÄ INICIANDO SERVIDOR..." -ForegroundColor Green
Write-Host "========================" -ForegroundColor Green
Write-Host "üìã Presiona Ctrl+C para detener el servidor" -ForegroundColor Yellow
Write-Host "üåê El servidor estar√° disponible en las URLs mostradas arriba`n" -ForegroundColor Cyan

# Iniciar el servidor Flask
try {
    python app.py
} catch {
    Write-Host "`n‚ùå Error al iniciar el servidor" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Yellow
}

Write-Host "`nüõë Servidor detenido" -ForegroundColor Yellow
pause
